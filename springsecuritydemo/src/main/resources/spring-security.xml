<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://code.alibabatech.com/schema/dubbo
                        http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">
    <!--设置不需要验证的页面-->
    <!--<security:http security="none" pattern="/pages/**"/>-->
    <security:http security="none" pattern="/login.html"/>
    <!--
        http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为true时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为false时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定intercept-url中的access属性是否使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--只需要认证通过就可以访问的页面-->
        <security:intercept-url pattern="/pages/a.html" access="isAuthenticated()"/>
        <!--需要拥有add权限-->
        <security:intercept-url pattern="/pages/b.html" access="hasAuthority('add')"/>
        <!--拥有admin权限-->
        <security:intercept-url pattern="/pages/c.html" access="hasRole('ADMIN')"/>
        <!--
            intercept-url：定义一个拦截规则
            pattern：对哪些url进行权限控制
            access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
                  请求的用户只需拥有其中的一个角色就能成功访问对应的URL
        -->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>
        <!--使用自定义登陆页面-->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"
        />
        <!--定义登出配置-->
        <security:logout
            logout-success-url="/login.html"
            invalidate-session="true"
            logout-url="/logout.do"
        />
        <!--
          csrf：对应CsrfFilter过滤器
          disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403）
         -->
        <security:csrf disabled="true"></security:csrf>
    </security:http>
    <!--
        authentication-manager：认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--
            authentication-provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="userService2">
            <!--
                user-service：用于获取用户信息，提供给authentication-provider进行认证
            -->
            <!--
                user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
                {noop}：表示当前使用的密码为明文
            <security:user-service>

                <security:user name="admin"
                               password="{noop}admin"
                               authorities="ROLE_ADMIN"/>
            </security:user-service>
            -->
            <!--配置密码加密对象-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置自定义登陆校验对象-->
    <bean name="userService" class="com.itheima.security.SpringSecurityUserService"/>
    <bean name="userService2" class="com.itheima.security.SpringSecurityUserService2"/>

    <!--配置密码加密对象-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--开启spring 注解-->
    <context:annotation-config/>

    <!--开启spring 注解 , 使用mvc开启-->
    <mvc:annotation-driven/>
    <context:component-scan base-package="com.itheima.controller"/>

    <!--开启注解方式控制权限-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>